.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Yahoo::Search 3pm"
.TH Yahoo::Search 3pm "2010-06-15" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Yahoo::Search \- Perl interface to the Yahoo! Search public API.
.SH "VERSION"
.IX Header "VERSION"
version 1.11.3
.PP
The following search spaces are supported:
.IP "Doc" 3
.IX Item "Doc"
Common web search for documents (html, pdf, doc, ...), including Y!Q
contextual search.
.IP "Image" 3
.IX Item "Image"
Image search (jpeg, png, gif, ...)
.IP "Video" 3
.IX Item "Video"
Video file search (avi, mpeg, realmedia, ...)
.IP "News" 3
.IX Item "News"
News article search
.IP "Local" 3
.IX Item "Local"
Yahoo! Local area (ZIP-code-based Yellow-Page like search)
.IP "Terms" 3
.IX Item "Terms"
A pseudo-search to report the important search terms from the provided
content or content+query.
.IP "Spell" 3
.IX Item "Spell"
A pseudo-search to fetch a \*(L"did you mean?\*(R" spelling suggestion for a search term.
.IP "Related" 3
.IX Item "Related"
A pseudo-search to fetch \*(L"also try\*(R" related-searches for a search term.
.PP
(Note: what this Perl \s-1API\s0 calls \*(L"Doc\*(R" Search is what Yahoo! calls \*(L"Web\*(R"
Search. But gee, aren't all web searches \*(L"Web\*(R" search, including
Image/News/Video/etc?)
.PP
Yahoo!'s raw \s-1API\s0, which this package uses, is described at:
.PP
.Vb 1
\&  http://developer.yahoo.net/
.Ve
.SH "DOCS"
.IX Header "DOCS"
The full documentation for this suite of classes is spread among these packages:
.PP
.Vb 4
\&   Yahoo::Search
\&   Yahoo::Search::Request
\&   Yahoo::Search::Response
\&   Yahoo::Search::Result
.Ve
.PP
However, you need \f(CW\*(C`use\*(C'\fR only \fBYahoo::Search\fR, which brings in the others
as needed.
.PP
In the common case, you need read only the first and the last
(Yahoo::Search to create a query, and Yahoo::Search::Result to interpret
the results).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Yahoo::Search provides a rich and full-featured set of classes for
accessing the various features of Yahoo! Search, and also offers a variety
of shortcuts to allow simple access, such as the following \fBDoc\fR search:
.PP
.Vb 10
\& use Yahoo::Search;
\& my @Results = Yahoo::Search\->Results(Doc => "Britney latest marriage",
\&                                      AppId => "YahooDemo",
\&                                      # The following args are optional.
\&                                      # (Values shown are package defaults).
\&                                      Mode         => \*(Aqall\*(Aq, # all words
\&                                      Start        => 0,
\&                                      Count        => 10,
\&                                      Type         => \*(Aqany\*(Aq, # all types
\&                                      AllowAdult   => 0, # no porn, please
\&                                      AllowSimilar => 0, # no dups, please
\&                                      Language     => undef,
\&                                     );
\& warn $@ if $@; # report any errors
\&
\& for my $Result (@Results)
\& {
\&     printf "Result: #%d\en",  $Result\->I + 1,
\&     printf "Url:%s\en",       $Result\->Url;
\&     printf "%s\en",           $Result\->ClickUrl;
\&     printf "Summary: %s\en",  $Result\->Summary;
\&     printf "Title: %s\en",    $Result\->Title;
\&     printf "In Cache: %s\en", $Result\->CacheUrl;
\&     print "\en";
\& }
.Ve
.PP
The first argument to \f(CW\*(C`Results\*(C'\fR indicates which search space is to be
queried (in this case, \fBDoc\fR). The second argument is the search term or
phrase (described in detail in the next section). Subsequent arguments are
optional key/value pairs (described in detail in the section after that) \*(--
the ones shown in the example are those allowed for a \fBDoc\fR query, with
the values shown being the defaults.
.PP
\&\f(CW\*(C`Results\*(C'\fR returns a list of Yahoo::Search::Result objects, one per item
(in the case of a \fBDoc\fR search, an item is a web page, \fIpdf\fR document,
\&\fIdoc\fR document, etc.). The methods available to a \f(CW\*(C`Result\*(C'\fR object are
dependent upon the search space of the original query \*(-- see
Yahoo::Search::Result documentation for the complete list.
.SH "Search term / phrase"
.IX Header "Search term / phrase"
Within a search phrase ("\f(CW\*(C`Britney latest marriage\*(C'\fR\*(L" in the example
above), words that you wish to be included even if they would otherwise be
eliminated as \*(R"too common\*(L" should be proceeded with a \*(R"\f(CW\*(C`+\*(C'\fR\*(L". Words that you
wish to exclude should be proceeded with a \*(R"\f(CW\*(C`\-\*(C'\fR\*(L". Words can be separated
with \*(R"\f(CW\*(C`OR\*(C'\fR" (the default for the \f(CW\*(C`any\*(C'\fR Mode, described below), and can be
wrapped in double quotes to identify an exact phrase (the default with the
\&\f(CW\*(C`phrase\*(C'\fR Mode, also described below).
.PP
There are also a number of \*(L"Search Meta Words\*(R", as described at
http://help.yahoo.com/help/us/ysearch/basics/basics\-04.html and
http://help.yahoo.com/help/us/ysearch/tips/tips\-03.html , which can stand
along or be combined with \fBDoc\fR searches (and, to some extent, some of the
others \*(-- \s-1YMMV\s0):
.IP "\fBsite:\fR" 4
.IX Item "site:"
allows one to find all documents within a particular domain and all its
subdomains. Example: \fBsite:yahoo.com\fR
.IP "\fBhostname:\fR" 4
.IX Item "hostname:"
allows one to find all documents from a particular host only.
Example: \fBhostname:autos.yahoo.comm\fR
.IP "\fBlink:\fR" 4
.IX Item "link:"
allows one to find documents that link to a particular url.
Example: \fBlink:http://autos.yahoo.com/\fR
.IP "\fBurl:\fR" 4
.IX Item "url:"
allows one to find a specific document in Yahoo!'s index.
Example: \fBurl:http://edit.autos.yahoo.com/repair/tree/0.html\fR
.IP "\fBinurl:\fR" 4
.IX Item "inurl:"
allows one to find a specific keyword as part of indexed urls.
Example: \fBinurl:bulgarian\fR
.IP "\fBintitle:\fR" 4
.IX Item "intitle:"
allows one to find a specific keyword as part of the indexed titles.
Example: \fBintitle:Bulgarian\fR
.PP
As an example combining a number of different search styles, consider
.PP
.Vb 2
\&    my @Results = Yahoo::Search\->Results(Doc => \*(Aqsite:TheSmokingGun.com "Michael Jackson" \-arrest\*(Aq,
\&                                         AppId => "YahooDemo");
.Ve
.PP
This returns data about pages at TheSmokingGun.com about Michael Jackson
that don't contain the word \*(L"arrest\*(R" (yes, there are actually a few such
pages).
.SH "Query arguments"
.IX Header "Query arguments"
As mentioned above, the arguments allowed in a \f(CW\*(C`Query\*(C'\fR call depend upon
the search space of the query. Here is a table of the possible arguments,
showing which apply to queries of which search space:
.PP
.Vb 6
\&                  Doc   Image  Video  News   Local  Spell Related Terms
\&                 \-\-\-\-\-  \-\-\-\-\-  \-\-\-\-\-  \-\-\-\-\-  \-\-\-\-\-  \-\-\-\-\- \-\-\-\-\-\-\- \-\-\-\-\-
\&  AppId           [X]    [X]    [X]    [X]    [X]    [X]    [X]    [X]
\&  Mode            [X]    [X]    [X]    [X]    [X]     .      .      .
\&  Start           [X]    [X]    [X]    [X]    [X]     .      .      .
\&  Count           [X]    [X]    [X]    [X]    [X]     .     [X]     .
\&
\&  Context         [X]     .      .      .      .      .      .     [X]
\&  Country         [X]     .      .      .      .      .      .      .
\&  License         [X]     .      .      .      .      .      .      .
\&  AllowSimilar    [X]     .      .      .      .      .      .      .
\&  AllowAdult      [X]    [X]    [X]     .      .      .      .      .
\&  Type            [X]    [X]    [X]     .      .      .      .      .
\&  Language        [X]     .      .     [X]     .      .      .      .
\&  Region          [X]     .      .      .      .      .      .      .
\&  Sort             .      .      .     [X]    [X]     .      .      .
\&  Color            .     [X]     .      .      .      .      .      .
\&      .
\&  Lat              .      .      .      .     [X]     .      .      .
\&  Long             .      .      .      .     [X]     .      .      .
\&  Street           .      .      .      .     [X]     .      .      .
\&  City             .      .      .      .     [X]     .      .      .
\&  State            .      .      .      .     [X]     .      .      .
\&  PostalCode       .      .      .      .     [X]     .      .      .
\&  Location         .      .      .      .     [X]     .      .      .
\&  Radius           .      .      .      .     [X]     .      .      .
\&
\&  AutoContinue    [X]    [X]    [X]    [X]    [X]     .      .      .
\&  Debug           [X]    [X]    [X]    [X]    [X]    [X]    [X]    [X]
\&  PreRequestCallback [X] [X]    [X]    [X]    [X]    [X]    [X]    [X]
.Ve
.PP
Here are details of each:
.IP "AppId" 4
.IX Item "AppId"
A character string which identifies the application making use of the
Yahoo! Search \s-1API\s0. (Think of it along the lines of an \s-1HTTP\s0 User-Agent
string.)
.Sp
The characters allowed are space, plus \f(CW\*(C`A\-Za\-z0\-9_()[]*+\-=,.:@\e\*(C'\fR
.Sp
This argument is required of all searches (sorry). You can make up whatever
AppId you'd like, but you are encouraged to register it via the link on
.Sp
.Vb 1
\&  http://developer.yahoo.net/
.Ve
.Sp
especially if you are creating something that will be widely distributed.
.Sp
As mentioned below in \fIDefaults and Default Overrides\fR, it's particularly
convenient to get the \f(CW\*(C`AppId\*(C'\fR out of the way by putting it on the \f(CW\*(C`use\*(C'\fR
line, e.g.
.Sp
.Vb 1
\&   use Yahoo::Search AppId => \*(Aqjust testing\*(Aq;
.Ve
.Sp
It then applies to all queries unless explicitly overridden.
.IP "Mode" 4
.IX Item "Mode"
Must be one of: \f(CW\*(C`all\*(C'\fR (the default), \f(CW\*(C`any\*(C'\fR, or \f(CW\*(C`phrase\*(C'\fR. Indicates how
multiple words in the search term are used: search for documents with
\&\fIall\fR words, documents with \fIany\fR words, or documents that contain the
search term as an exact \fIphrase\fR.
.IP "Start" 4
.IX Item "Start"
Indicates the ordinal of the first result to be returned, e.g. the \*(L"30\*(R" of
\&\*(L"showing results 30\-40\*(R" (except that \f(CW\*(C`Start\*(C'\fR is zero-based, not
one-based). The default is zero, meaning that the primary results will be
returned.
.IP "Count" 4
.IX Item "Count"
Indicates how many items should be returned. The default is 10. The maximum
allowed depends on the search space being queried. The maximum isn't
enforced by this module.
.Sp
Note that
.Sp
.Vb 1
\&  Yahoo::Search::MaxCount($SearchSpace)
.Ve
.Sp
and
.Sp
.Vb 1
\&  $SearchEngine\->MaxCount($SearchSpace)
.Ve
.Sp
return the assumed maximum count allowed for the given \f(CW$SearchSpace\fR.
These counts may be out of date.
.IP "Context" 4
.IX Item "Context"
By providing a context string to a \fBDoc\fR query, you change the request
from a normal document query to a Y!Q contextual query. Y!Q is described at
.Sp
.Vb 1
\&   http://yq.search.yahoo.com/
.Ve
.Sp
The \f(CW\*(C`Content\*(C'\fR string can be raw text, html, etc., and is to provide the
document search more information about what kind of results are wanted.
.Sp
For example, without a \f(CW\*(C`Context\*(C'\fR, a document search for \*(L"Madonna\*(R" returns
the most popular documents (which are invariably about the famous pop
singer). However, if you provide a context string even as simple as \*(L"Virgin
Mary\*(R", the results skew away from the pop singer toward the Mother of God.
Since it's likely that a confusion between the two would be less than
optimal in pretty much every conceivable case, this is a Good Thing.
.Sp
When a \f(CW\*(C`Context\*(C'\fR is given, the query string itself may be empty. For
example, if you have the text of a blog entry in \f(CW$BlogText\fR, you can
fetch \*(L"related links\*(R" via:
.Sp
.Vb 2
\&   use Yahoo::Search AppId => \*(Aqmy blog stuff\*(Aq;
\&   my @Results = Yahoo::Search\->Results(Doc => undef, Context => $BlogText);
.Ve
.Sp
In a \fBTerms\fR search, \f(CW\*(C`Context\*(C'\fR is required.
.IP "Country" 4
.IX Item "Country"
Attempts to restrict the \fBDoc\fR search to web servers residing in the named
country. As of this writing, the Yahoo! web services support the following
codes for \f(CW\*(C`Country\*(C'\fR:
.Sp
.Vb 10
\& code   country
\& \-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  ar    Argentina
\&  au    Australia
\&  at    Austria
\&  be    Belgium
\&  br    Brazil
\&  ca    Canada
\&  cn    China
\&  cz    Czech Republic
\&  dk    Denmark
\&  fi    Finland
\&  fr    France
\&  de    Germany
\&  it    Italy
\&  jp    Japan
\&  kr    Korea
\&  nl    Netherlands
\&  no    Norway
\&  pl    Poland
\&  rf    Russian Federation
\&  es    Spain
\&  se    Sweden
\&  ch    Switzerland
\&  tw    Taiwan
\&  uk    United Kingdom
\&  us    United States
.Ve
.Sp
In addition, the code \*(L"default\*(R" is the same as the lack of a country
specifier: no country-related restrictions.
.Sp
The above list can be found in \f(CW%Yahoo::Search::KnownCountry\fR.
.Sp
Because the list of countries may be updated more often than this Perl \s-1API\s0,
this Perl \s-1API\s0 does not attempt to restrict the \f(CW\*(C`Country\*(C'\fR value to members
of this specific list. If you provide a \f(CW\*(C`Country\*(C'\fR value which is not
supported by Yahoo!'s web services, a \*(L"400 Bad Request\*(R" error is returned
in \f(CW\*(C`@$\*(C'\fR.
.IP "Region" 4
.IX Item "Region"
Uses a different regional version of the Yahoo! web service. For
example, setting \f(CW\*(C`Region\*(C'\fR to \*(L"de\*(R" will show the results as returned
from de.search.yahoo.com. Note that this does not restrict the results
in the way \f(CW\*(C`Country\*(C'\fR and \f(CW\*(C`Language\*(C'\fR do, but will merely lead to a
different weighting of the results. As of this writing, the Yahoo! web
services support the following codes for \f(CW\*(C`Region\*(C'\fR:
.Sp
.Vb 10
\& code   country
\& \-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  ar    Argentina
\&  au    Australia
\&  at    Austria
\&  br    Brazil
\&  ca    Canada
\&  ct    Catalan
\&  dk    Denmark
\&  fi    Finland
\&  fr    France
\&  de    Germany
\&  in    India
\&  id    Indonesia
\&  it    Italy
\&  my    Malaysia
\&  mx    Mexico
\&  nl    Netherlands
\&  no    Norway
\&  ph    Phillipines
\&  ru    Russian Federation
\&  sg    Singapore
\&  es    Spain
\&  se    Sweden
\&  ch    Switzerland
\&  th    Thailand
\&  uk    United Kingdom
\&  us    United States (yahoo.com)
.Ve
.IP "License" 4
.IX Item "License"
For \f(CW\*(C`Doc\*(C'\fR searches, can be:
.RS 4
.ie n .IP """any""" 10
.el .IP "\f(CWany\fR" 10
.IX Item "any"
(the default) \*(-- results are not filtered with respect to licenses
.ie n .IP """cc_any""" 10
.el .IP "\f(CWcc_any\fR" 10
.IX Item "cc_any"
Only items with a Creative Commons license (of any type) are returned.
See their (horribly designed hard to find anything substantial) site at:
.Sp
.Vb 1
\&  http://creativecommons.org/
.Ve
.ie n .IP """cc_commercial""" 10
.el .IP "\f(CWcc_commercial\fR" 10
.IX Item "cc_commercial"
Only items with a Creative Commons license which allows some kind of
commercial use are returned.
.ie n .IP """cc_modifiable""" 10
.el .IP "\f(CWcc_modifiable\fR" 10
.IX Item "cc_modifiable"
Only items with a Creative Commons license which allows modification
(e.g. derived works) of some kind are returned.
.RE
.RS 4
.Sp
You may combine the above to create an intersection, e.g.
.Sp
.Vb 1
\&   License => "cc_commercial+cc_modifiable"
.Ve
.Sp
(space, comma, or plus-separated) returns items which allow \fIboth\fR some
kind of commercial use, and their use in some kinds of derivative works.
.RE
.IP "AllowSimilar" 4
.IX Item "AllowSimilar"
If this boolean is true (the default is false), similar results which would
otherwise not be returned are included in the result set.
.IP "AllowAdult" 4
.IX Item "AllowAdult"
If this boolean is false (the default), results considered to be \*(L"adult\*(R"
(i.e. porn) are not included in the result set. Set to true to allow
unfiltered results.
.Sp
Standard precautions apply about how the \*(L"is adult?\*(R" determination is not
perfect.
.IP "Type" 4
.IX Item "Type"
This argument can be used to restrict the results to only a specific file
type. The default value, \f(CW\*(C`any\*(C'\fR, allows any type associated with the search
space to be returned (that is, provides no restriction). Otherwise, the
values allowed for \f(CW\*(C`Type\*(C'\fR depend on the search space:
.Sp
.Vb 10
\& Search space    Allowed Type values
\& ============    ========================================================
\& Doc             any  html msword pdf ppt rss txt xls
\& Image           any  bmp gif jpeg png
\& Video           any  avi flash mpeg msmedia quicktime realmedia
\& News            N/A
\& Local           N/A
\& Spell           N/A
\& Related         N/A
\& Term            N/A
.Ve
.Sp
(Deprecated: you may use \f(CW\*(C`all\*(C'\fR in place of \f(CW\*(C`any\*(C'\fR)
.IP "Language" 4
.IX Item "Language"
If provided, attempts to restrict the results to documents in the given
language. The value is an language code such as \f(CW\*(C`en\*(C'\fR (English), \f(CW\*(C`ja\*(C'\fR
(Japanese), etc (mostly \s-1ISO\s0 639\-1 codes). As of this writing, the following
codes are supported:
.Sp
.Vb 10
\& code  language
\& \-\-\-\-  \-\-\-\-\-\-\-\-\-
\&  sq   Albanian
\&  ar   Arabic
\&  bg   Bulgarian
\&  ca   Catalan
\&  szh  Chinese (simplified)
\&  tzh  Chinese (traditional)
\&  hr   Croatian
\&  cs   Czech
\&  da   Danish
\&  nl   Dutch
\&  en   English
\&  et   Estonian
\&  fi   Finnish
\&  fr   French
\&  de   German
\&  el   Greek
\&  he   Hebrew
\&  hu   Hungarian
\&  is   Icelandic
\&  it   Italian
\&  ja   Japanese
\&  ko   Korean
\&  lv   Latvian
\&  lt   Lithuanian
\&  no   Norwegian
\&  fa   Persian
\&  pl   Polish
\&  pt   Portuguese
\&  ro   Romanian
\&  ru   Russian
\&  sk   Slovak
\&  sl   Slovenian
\&  es   Spanish
\&  sv   Swedish
\&  th   Thai
\&  tr   Turkish
.Ve
.Sp
In addition, the code \*(L"default\*(R" is the same as the lack of a language
specifier, and seems to mean a mix of major world languages, skewed toward
English.
.Sp
The above list can be found in \f(CW%Yahoo::Search::KnownLanguage\fR.
.Sp
Because the list of languages may be updated more often than this Perl \s-1API\s0,
this Perl \s-1API\s0 does not attempt to restrict the \f(CW\*(C`Language\*(C'\fR value to members
of this specific list. If you provide a \f(CW\*(C`Language\*(C'\fR value which is not
supported by Yahoo!'s web services, a \*(L"400 Bad Request\*(R" error is returned
in \f(CW\*(C`@$\*(C'\fR.
.IP "Sort" 4
.IX Item "Sort"
For \fBNews\fR searches, \f(CW\*(C`sort\*(C'\fR may be \f(CW\*(C`rank\*(C'\fR (the default) or \f(CW\*(C`date\*(C'\fR.
.Sp
For \fBLocal\fR searches, \f(CW\*(C`sort\*(C'\fR may be \f(CW\*(C`relevance\*(C'\fR (the default; most
relevant first), \f(CW\*(C`distance\*(C'\fR (closest first), \f(CW\*(C`rating\*(C'\fR (highest rating
first), or \f(CW\*(C`title\*(C'\fR (alphabetic sort).
.IP "Color" 4
.IX Item "Color"
For \fBImage\fR searches, may be \f(CW\*(C`any\*(C'\fR (the default), \f(CW\*(C`color\*(C'\fR, or \f(CW\*(C`bw\*(C'\fR:
.RS 4
.ie n .IP """any""" 10
.el .IP "\f(CWany\fR" 10
.IX Item "any"
No filtering based on colorization or lack thereof
.ie n .IP """color""" 10
.el .IP "\f(CWcolor\fR" 10
.IX Item "color"
Only images with color are returned
.ie n .IP """bw""" 10
.el .IP "\f(CWbw\fR" 10
.IX Item "bw"
Only black & white / grayscale images are returned
.RE
.RS 4
.RE
.IP "Lat" 4
.IX Item "Lat"
.PD 0
.IP "Long" 4
.IX Item "Long"
.IP "Street" 4
.IX Item "Street"
.IP "City" 4
.IX Item "City"
.IP "State" 4
.IX Item "State"
.IP "PostalCode" 4
.IX Item "PostalCode"
.IP "Location" 4
.IX Item "Location"
.PD
These items are for a \fBLocal\fR query, and specify the epicenter of the
search. The epicenter must be provided in one of a variety of ways:
.RS 4
.IP "\(bu" 3
via \f(CW\*(C`Lat\*(C'\fR and \f(CW\*(C`Long\*(C'\fR
.IP "\(bu" 3
via the free-text \f(CW\*(C`Location\*(C'\fR
.IP "\(bu" 3
via \f(CW\*(C`Street\*(C'\fR and \f(CW\*(C`PostalCode\*(C'\fR
.IP "\(bu" 3
via \f(CW\*(C`Street\*(C'\fR and \f(CW\*(C`City\*(C'\fR and \f(CW\*(C`State\*(C'\fR
.IP "\(bu" 3
via \f(CW\*(C`PostalCode\*(C'\fR alone
.IP "\(bu" 3
via \f(CW\*(C`City\*(C'\fR and \f(CW\*(C`State\*(C'\fR alone.
.RE
.RS 4
.Sp
The list above is the order of precedence for when multiple fields are sent
(e.g. if a \f(CW\*(C`Lat\*(C'\fR and \f(CW\*(C`Long\*(C'\fR are sent, they are used regardless of
whether, say, a \f(CW\*(C`PostalCode\*(C'\fR is used), but it's probably best to send
exactly only the fields you wish to be used.
.Sp
\&\f(CW\*(C`Lat\*(C'\fR and \f(CW\*(C`Long\*(C'\fR are floating point numbers, such as this example:
.Sp
.Vb 2
\&   Lat  =>  39.224079  # 39 deg 13 min 26.686 sec North
\&   Long => \-98.541807, # 98 deg 32 min 30.506 sec West
.Ve
.Sp
(which happens to be the location of the \*(L"Medes Ranch\*(R" triangulation
station, upon which all country, state, etc., boundaries in North America
were originally based)
.Sp
\&\f(CW\*(C`Street\*(C'\fR is the street address, e.e. \*(L"701 First Ave\*(R". \f(CW\*(C`PostalCode\*(C'\fR is a
\&\s-1US\s0 5\-digit or 9\-digit \s-1ZIP\s0 code (e.g. \*(L"94089\*(R" or \*(L"94089\-1234\*(R").
.Sp
If \f(CW\*(C`Location\*(C'\fR is provided, it supersedes the others. It should be a string
along the lines of \*(L"701 First Ave, Sunnyvale \s-1CA\s0, 94089\*(R". The following forms
are recognized:
.Sp
.Vb 6
\&  city state
\&  city state zip
\&  zip
\&  street, city state
\&  street, city state zip
\&  street, zip
.Ve
.Sp
Searches that include a street address (either in the \f(CW\*(C`Location\*(C'\fR, or if
\&\f(CW\*(C`Location\*(C'\fR is empty, in \f(CW\*(C`Street\*(C'\fR) provide for a more detailed epicenter
specification.
.RE
.IP "Radius" 4
.IX Item "Radius"
For \fBLocal\fR searches, indicates how wide an area around the epicenter to
search. The value is the radius of the search area, in miles. The default
radius depends on the search location (urban areas tend to have a smaller
default radius).
.IP "AutoContinue" 4
.IX Item "AutoContinue"
A boolean (default off). If true, turns on the \fBpotentially dangerous\fR
auto-continuation, as described in the docs for \f(CW\*(C`NextResult\*(C'\fR in
Yahoo::Search::Response.
.IP "Debug" 4
.IX Item "Debug"
\&\f(CW\*(C`Debug\*(C'\fR is a string (defaults to an empty string). If the substring
"\f(CW\*(C`url\*(C'\fR\*(L" is found anywhere in the string, the url of the Yahoo! request is
printed on stderr. If \*(R"\f(CW\*(C`xml\*(C'\fR\*(L", the raw xml received is printed to stderr.
If \*(R"\f(CW\*(C`hash\*(C'\fR", the raw Perl hash, as converted from the \s-1XML\s0, is Data::Dump'd
to stderr.
.Sp
Thus, to print all debugging, you'd set \f(CW\*(C`Debug\*(C'\fR to a value such as "\f(CW\*(C`url
xml hash\*(C'\fR".
.IP "PreRequestCallback" 4
.IX Item "PreRequestCallback"
This is for debugging (I needed it for my own regression-test script). If
defined, it should be a code ref which accepts a single
Yahoo::Search::Request object argument. It is called just before Yahoo!'s
servers are contacted, and if it returns false, the call to Yahoo! is
aborted (be sure to set \f(CW$@\fR).
.SH "Class Hierarchy Details"
.IX Header "Class Hierarchy Details"
The Y! Search \s-1API\s0 class system supports the following objects (all loaded
as needed via Yahoo::Search):
.PP
.Vb 4
\&  Yahoo::Search
\&  Yahoo::Search::Request
\&  Yahoo::Search::Response
\&  Yahoo::Search::Result
.Ve
.PP
Here is a summary of them:
.IP "Yahoo::Search" 10
.IX Item "Yahoo::Search"
A \*(L"search engine\*(R" object which can hold user-specified default values for
search-query arguments. Often not used explicitly.
.IP "Yahoo::Search::Request" 10
.IX Item "Yahoo::Search::Request"
An object which holds the information needed to make one search-query
request. Often not used explicitly.
.IP "Yahoo::Search::Response" 10
.IX Item "Yahoo::Search::Response"
An object which holds the results of a query (including a bunch of
\&\f(CW\*(C`Result\*(C'\fR objects).
.IP "Yahoo::Search::Result" 10
.IX Item "Yahoo::Search::Result"
An object representing one query result (one image, web page, etc., as
appropriate to the original search space).
.ie n .SH """The Long Way"", and Common Practice"
.el .SH "``The Long Way'', and Common Practice"
.IX Header "The Long Way, and Common Practice"
The explicit way to perform a query and access the results is to first
create a \*(L"Search Engine\*(R" object:
.PP
.Vb 1
\&  my $SearchEngine = Yahoo::Search\->new();
.Ve
.PP
Optionally, you can provide \f(CW\*(C`new\*(C'\fR with key/value pairs as described in the
\&\fIQuery arguments\fR section above. Those values will then be available as
default values during subsequent request creation. (More on this later.)
.PP
You then use the search-engine object to create a request:
.PP
.Vb 1
\&  my $Request = $SearchEngine\->Request(Doc => Britney);
.Ve
.PP
You then actually make the request, getting a response:
.PP
.Vb 1
\&  my $Response = $Request\->Fetch();
.Ve
.PP
You can then access the set of \f(CW\*(C`Result\*(C'\fR objects in a number of ways,
either all at once
.PP
.Vb 1
\&  my @Results = $Response\->Results();
.Ve
.PP
or iteratively:
.PP
.Vb 4
\&  while (my $Result = $Response\->NextResult) {
\&               :
\&               :
\&  }
.Ve
.PP
\&\fBIn Practice....\fR
.PP
In practice, one often does not need to go through all these steps
explicitly. The only reason to create a search-engine object, for example,
is to hold default overrides (to be made available to subsequent requests
made via the search-engine object). For example:
.PP
.Vb 5
\&   use Yahoo::Search;
\&   my $SearchEngine = Yahoo::Search\->new(AppId      => "Bobs Fish Mart",
\&                                         Count      => 25,
\&                                         AllowAdult => 1,
\&                                         PostalCode => 95014);
.Ve
.PP
Now, calls to the various query functions (\f(CW\*(C`Query\*(C'\fR, \f(CW\*(C`Results\*(C'\fR) via this
\&\f(CW$SearchEngine\fR will use these defaults (\fBImage\fR searches, for example,
will be with \f(CW\*(C`AllowAdult\*(C'\fR set to true, and \fBLocal\fR searches will be
centered at \s-1ZIP\s0 code 95014.) All will return up to 25 results.
.PP
In this example:
.PP
.Vb 2
\&   my @Results = $SearchEngine\->Results(Image => "Britney",
\&                                        Count => 20);
.Ve
.PP
The query is made with \f(CW\*(C`AppId\*(C'\fR as '\f(CW\*(C`Bobs_Fish_Mart\*(C'\fR' and \f(CW\*(C`AllowAdult\*(C'\fR
true (both via \f(CW$SearchEngine\fR), but \f(CW\*(C`Count\*(C'\fR is 20 because explicit args
override the default in \f(CW$SearchEngine\fR. The \f(CW\*(C`PostalCode\*(C'\fR arg does not
apply too an \fBImage\fR search, so the default provided from \f(CW\*(C`SearchEngine\*(C'\fR
is not needed with this particular query.
.PP
\&\fBDefaults on the 'use' line\fR
.PP
You can also provide the same defaults on the \f(CW\*(C`use\*(C'\fR line. The following
example has the same result as the previous one:
.PP
.Vb 4
\&   use Yahoo::Search AppId      => \*(AqBobs Fish Mart\*(Aq,
\&                     Count      => 25,
\&                     AllowAdult => 1,
\&                     PostalCode => 95014;
\&
\&   my @Results = Yahoo::Search\->Results(Image => "Britney",
\&                                        Count => 20);
.Ve
.SH "Functions and Methods"
.IX Header "Functions and Methods"
Here, finally, are the functions and methods provided by Yahoo::Search.
In all cases, \*(L"...args...\*(R" are any of the key/value pairs listed in the
\&\fIQuery arguments\fR section of this document (e.g. \*(L"Count => 20\*(R")
.ie n .IP "$SearchEngine = Yahoo::Search\->new(...args...)" 4
.el .IP "\f(CW$SearchEngine\fR = Yahoo::Search\->new(...args...)" 4
.IX Item "$SearchEngine = Yahoo::Search->new(...args...)"
Creates a search-engine object (a container for defaults).
On error, sets \f(CW$@\fR and returns nothing.
.ie n .IP "$Request = $SearchEngine\->Request($space => $query, ...args...)" 4
.el .IP "\f(CW$Request\fR = \f(CW$SearchEngine\fR\->Request($space => \f(CW$query\fR, ...args...)" 4
.IX Item "$Request = $SearchEngine->Request($space => $query, ...args...)"
.PD 0
.ie n .IP "$Request = Yahoo::Search\->Request($space => $query, ...args...)" 4
.el .IP "\f(CW$Request\fR = Yahoo::Search\->Request($space => \f(CW$query\fR, ...args...)" 4
.IX Item "$Request = Yahoo::Search->Request($space => $query, ...args...)"
.PD
Creates a \f(CW\*(C`Request\*(C'\fR object representing a search of the named search space
(\fBDoc\fR, \fBImage\fR, etc.) of the given query string.
.Sp
On error, sets \f(CW$@\fR and returns nothing.
.Sp
\&\fBNote\fR: all arguments are in key/value pairs, but the \f(CW$space\fR/\f(CW$query\fR
pair (which is required) is required to appear first.
.ie n .IP "$Response = $SearchEngine\->Query($space => $query, ...args...)" 4
.el .IP "\f(CW$Response\fR = \f(CW$SearchEngine\fR\->Query($space => \f(CW$query\fR, ...args...)" 4
.IX Item "$Response = $SearchEngine->Query($space => $query, ...args...)"
.PD 0
.ie n .IP "$Response = Yahoo::Search\->Query($space => $query, ...args...)" 4
.el .IP "\f(CW$Response\fR = Yahoo::Search\->Query($space => \f(CW$query\fR, ...args...)" 4
.IX Item "$Response = Yahoo::Search->Query($space => $query, ...args...)"
.PD
Creates an implicit \f(CW\*(C`Request\*(C'\fR object, and fetches it, returning the
resulting \f(CW\*(C`Response\*(C'\fR.
.Sp
On error, sets \f(CW$@\fR and returns nothing.
.Sp
\&\fBNote\fR: all arguments are in key/value pairs, but the \f(CW$space\fR/\f(CW$query\fR
pair (which is required) is required to appear first.
.ie n .IP "@Results = $SearchEngine\->Results($space => $query, ...args...)" 4
.el .IP "\f(CW@Results\fR = \f(CW$SearchEngine\fR\->Results($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@Results = $SearchEngine->Results($space => $query, ...args...)"
.PD 0
.ie n .IP "@Results = Yahoo::Search\->Results($space => $query, ...args...)" 4
.el .IP "\f(CW@Results\fR = Yahoo::Search\->Results($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@Results = Yahoo::Search->Results($space => $query, ...args...)"
.PD
Creates an implicit \f(CW\*(C`Request\*(C'\fR object, then \f(CW\*(C`Response\*(C'\fR object,
in the end returning a list of \f(CW\*(C`Result\*(C'\fR objects.
.Sp
On error, sets \f(CW$@\fR and returns nothing.
.Sp
\&\fBNote\fR: all arguments are in key/value pairs, but the \f(CW$space\fR/\f(CW$query\fR
pair (which is required) is required to appear first.
.ie n .IP "@links = $SearchEngine\->Links($space => $query, ...args...)" 4
.el .IP "\f(CW@links\fR = \f(CW$SearchEngine\fR\->Links($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@links = $SearchEngine->Links($space => $query, ...args...)"
.PD 0
.ie n .IP "@links = Yahoo::Search\->Links($space => $query, ...args...)" 4
.el .IP "\f(CW@links\fR = Yahoo::Search\->Links($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@links = Yahoo::Search->Links($space => $query, ...args...)"
.PD
A super shortcut which goes directly from the query args to a list of
.Sp
.Vb 1
\&  <a href=...>...</a>
.Ve
.Sp
links. Essentially,
.Sp
.Vb 1
\&    map { $_\->Link } Yahoo::Search\->Results($space => $query, ...args...);
.Ve
.Sp
or, more explicitly:
.Sp
.Vb 1
\&    map { $_\->Link } Yahoo::Search\->new()\->Request($space => $query, ...args...)\->Fetch\->Results(@_);
.Ve
.Sp
See \f(CW\*(C`Link\*(C'\fR in the documentation for Yahoo::Search::Result.
.Sp
\&\fBNote\fR: all arguments are in key/value pairs, but the \f(CW$space\fR/\f(CW$query\fR
pair (which is required) is required to appear first.
.ie n .IP "@links = $SearchEngine\->Terms($space => $query, ...args...)" 4
.el .IP "\f(CW@links\fR = \f(CW$SearchEngine\fR\->Terms($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@links = $SearchEngine->Terms($space => $query, ...args...)"
.PD 0
.ie n .IP "@links = Yahoo::Search\->Terms($space => $query, ...args...)" 4
.el .IP "\f(CW@links\fR = Yahoo::Search\->Terms($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@links = Yahoo::Search->Terms($space => $query, ...args...)"
.PD
A super shortcut for \fBSpell\fR, \fBRelated\fR, and \fBTerms\fR search spaces,
returns the list of spelling suggestions, related-search suggestions, or
important search terms, respectively.
.Sp
\&\fBNote\fR: all arguments are in key/value pairs, but the \f(CW$space\fR/\f(CW$query\fR
pair (which is required) is required to appear first. For a \fBTerms\fR
search, the \f(CW$query\fR may be \f(CW\*(C`undef\*(C'\fR (and in in any case, a \fBTerms\fR
search requires a \f(CW\*(C`Context\*(C'\fR argument).
.Sp
For example,
.Sp
.Vb 4
\&   use Yahoo::Search AppId => "YahooDemo";
\&   for my $term (Yahoo::Search\->Terms(Related => "Tivo")) {
\&       print $term , "\en";
\&   }
.Ve
.Sp
displays something along the lines of:
.Sp
.Vb 10
\&   directv tivo
\&   hd tivo
\&   tivo community
\&   tivo forum
\&   tivo upgrade
\&   tivo rebate
\&   dvd recorder tivo
\&   direct tv tivo
\&   tivo to go
\&   hdtv tivo
.Ve
.Sp
Here's an example with the \fBTerms\fR search space:
.Sp
.Vb 1
\&   use Yahoo::Search AppId => "YahooDemo";
\&
\&   my $Context = << \*(Aq*END*\*(Aq;
\&   We the People of the United States, in Order to form a more perfect
\&   Union, establish Justice, insure domestic Tranquility, provide for the
\&   common defence, promote the general Welfare, and secure the Blessings of
\&   Liberty to ourselves and our Posterity, do ordain and establish this
\&   Constitution for the United States of America.
\&   *END*
\&
\&   for my $term (Yahoo::Search\->Terms(Terms => undef, Context => $Context)) {
\&       print $term, "\en";
\&   }
.Ve
.Sp
displays something along the lines of:
.Sp
.Vb 10
\&  insure domestic tranquility
\&  promote the general welfare
\&  domestic tranquility
\&  united states
\&  states of america
\&  united states of america
\&  posterity
\&  blessings
\&  constitution
\&  perfect union
.Ve
.Sp
Note that a \fBSpell\fR search returns at most one term.
.ie n .IP "@html = $SearchEngine\->HtmlResults($space => $query, ...args...)" 4
.el .IP "\f(CW@html\fR = \f(CW$SearchEngine\fR\->HtmlResults($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@html = $SearchEngine->HtmlResults($space => $query, ...args...)"
.PD 0
.ie n .IP "@html = Yahoo::Search\->HtmlResults($space => $query, ...args...)" 4
.el .IP "\f(CW@html\fR = Yahoo::Search\->HtmlResults($space => \f(CW$query\fR, ...args...)" 4
.IX Item "@html = Yahoo::Search->HtmlResults($space => $query, ...args...)"
.PD
Like \f(CW\*(C`Links\*(C'\fR, but returns a list of html strings (one representing each
result). See \f(CW\*(C`as_html\*(C'\fR in the documentation for Yahoo::Search::Result.
.Sp
A simple result display might look like
.Sp
.Vb 1
\&   print join "<p>", Yahoo::Search\->HtmlResults(....);
.Ve
.Sp
or, perhaps
.Sp
.Vb 8
\&   if (my @HTML = Yahoo::Search\->HtmlResults(....))
\&   {
\&      print "<ul>";
\&      for my $html (@HTML) {
\&         print "<li>", $html;
\&      }
\&      print "</ul>";
\&   }
.Ve
.Sp
As an example, here's a complete \s-1CGI\s0 which shows results from an
image-search, where the search term is in the '\f(CW\*(C`s\*(C'\fR' query string:
.Sp
.Vb 4
\&   #!/usr/local/bin/perl \-w
\&   use CGI;
\&   my $cgi = new CGI;
\&   print $cgi\->header();
\&
\&   use Yahoo::Search AppId => \*(Aqmy\-search\-app\*(Aq;
\&   if (my $term = $cgi\->param(\*(Aqs\*(Aq)) {
\&       print join "<p>", Yahoo::Search\->HtmlResults(Image => $term);
\&   }
.Ve
.Sp
The results, however, do look better with some style-sheet attention, such
as:
.Sp
.Vb 10
\&  <style>
\&    .yResult { display: block; border: #CCF 3px solid ; padding:10px }
\&    .yLink   { }
\&    .yTitle  { display:none }
\&    .yImg    { border: solid 1px }
\&    .yUrl    { display:none }
\&    .yMeta   { font\-size: 80% }
\&    .ySrcUrl { }
\&    .ySum    { font\-family: arial; font\-size: 90% }
\&  </style>
.Ve
.Sp
\&\fBNote\fR: all arguments are in key/value pairs, but the \f(CW$space\fR/\f(CW$query\fR
pair (which is required) is required to appear first.
.ie n .IP "$num = $SearchEngine\->MaxCount($space)" 4
.el .IP "\f(CW$num\fR = \f(CW$SearchEngine\fR\->MaxCount($space)" 4
.IX Item "$num = $SearchEngine->MaxCount($space)"
.PD 0
.ie n .IP "$num = Yahoo::Search\->MaxCount($space)" 4
.el .IP "\f(CW$num\fR = Yahoo::Search\->MaxCount($space)" 4
.IX Item "$num = Yahoo::Search->MaxCount($space)"
.PD
Returns the assumed maximum allowed \f(CW\*(C`Count\*(C'\fR query-argument for the given search space.
The amount may be out of date.
.ie n .IP "$SearchEngine\->Default($key [ => $val ]);" 4
.el .IP "\f(CW$SearchEngine\fR\->Default($key [ => \f(CW$val\fR ]);" 4
.IX Item "$SearchEngine->Default($key [ => $val ]);"
If a new value is given, update the <$SearchEngine>'s value for the named
\&\f(CW$key\fR.
.Sp
In either case, the old value for \f(CW$key\fR in effect is returned. If the
\&\f(CW$SearchEngine\fR had a previous value, it is returned. Otherwise, the
global value in effect is returned.
.Sp
As always, the key is from among those mentioned in the \fIQuery arguments\fR
section above.
.Sp
The old value is returned.
.ie n .IP "Yahoo::Search\->Default($key [ => $val ]);" 4
.el .IP "Yahoo::Search\->Default($key [ => \f(CW$val\fR ]);" 4
.IX Item "Yahoo::Search->Default($key [ => $val ]);"
Update or, if no new value is given, check the global default value for the
named argument. The key is from among those mentioned in the \fIQuery
examples\fR section above, as well as \f(CW\*(C`AutoCarp\*(C'\fR (discussed below).
.SH "Defaults and Default Overrides"
.IX Header "Defaults and Default Overrides"
All key/value pairs mentioned in the \fIQuery arguments\fR section may appear
on the \f(CW\*(C`use\*(C'\fR line, in the call to the \f(CW\*(C`new\*(C'\fR constructor, or in requests
that create a query explicitly or implicitly (\f(CW\*(C`Request\*(C'\fR, \f(CW\*(C`Query\*(C'\fR,
\&\f(CW\*(C`Results\*(C'\fR, \f(CW\*(C`Links\*(C'\fR, or \f(CW\*(C`HtmlResults\*(C'\fR).
.PP
Each argument's value takes the first of the following which applies
(listed in order of precedence):
.IP "4)" 6
.IX Item "4)"
The actual arguments to a function which creates (explicitly or implicitly)
a request.
.IP "3)" 6
.IX Item "3)"
Search-engine default overrides, set when the Yahoo::Search \f(CW\*(C`new\*(C'\fR
constructor is used to create a search-engine object, or when that object's
\&\f(CW\*(C`Default\*(C'\fR method is called.
.IP "2)" 6
.IX Item "2)"
Global default overrides, set on the \f(CW\*(C`use\*(C'\fR line or via
.Sp
.Vb 1
\& Yahoo::Search\->Default()
.Ve
.IP "1)" 6
.IX Item "1)"
Defaults hard-coded into these packages (e.g. \f(CW\*(C`Count\*(C'\fR defaults to 10).
.PP
It's particularly convenient to put the \f(CW\*(C`AppId\*(C'\fR on the \f(CW\*(C`use\*(C'\fR line,
e.g.
.PP
.Vb 1
\&   use Yahoo::Search AppId => \*(Aqjust testing\*(Aq;
.Ve
.SH "AutoCarp"
.IX Header "AutoCarp"
By default, detected errors that would be classified as programming errors
(e.g. use of incorrect args) are automatically spit out to stderr besides
being returned via \f(CW$@\fR. This can be turned off via
.PP
.Vb 1
\&  use Yahoo::Search AutoCarp => 0;
.Ve
.PP
or
.PP
.Vb 1
\& Yahoo::Search\->Default(AutoCarp => 0);
.Ve
.PP
The default of true is somewhat obnoxious, but hopefully helps create
better programs by forcing the programmer to actively think about error
checking (if even long enough to turn off error reporting).
.SH "Global Variables"
.IX Header "Global Variables"
The following are globally available:
.ie n .IP "%Yahoo::Search::KnownCountry" 5
.el .IP "\f(CW%Yahoo::Search::KnownCountry\fR" 5
.IX Item "%Yahoo::Search::KnownCountry"
A hash with the known (as of this writing) country codes supported by
Yahoo! for the \f(CW\*(C`Country\*(C'\fR argument.
.ie n .IP "%Yahoo::Search::KnownLanguage" 5
.el .IP "\f(CW%Yahoo::Search::KnownLanguage\fR" 5
.IX Item "%Yahoo::Search::KnownLanguage"
A hash with the known (as of this writing) language codes supported by
Yahoo! for the \f(CW\*(C`Language\*(C'\fR argument.
.ie n .IP "$Yahoo::Search::RecentRequestUrl" 5
.el .IP "\f(CW$Yahoo::Search::RecentRequestUrl\fR" 5
.IX Item "$Yahoo::Search::RecentRequestUrl"
The most recent \s-1REST\s0 url actually fetched from Yahoo! (perhaps useful for
debugging). It does \fInot\fR reflect the fact that a request is changed to a
\&\s-1POST\s0 when request is sufficiently large. Thus, there are times when the url
on \f(CW$Yahoo::Search::RecentRequestUrl\fR is not actually fetchable from the
Yahoo! servers.
.ie n .IP "$Yahoo::Search::UseXmlSimple" 5
.el .IP "\f(CW$Yahoo::Search::UseXmlSimple\fR" 5
.IX Item "$Yahoo::Search::UseXmlSimple"
If you set this to a true value, the \s-1XML\s0 returned by Yahoo! will be parsed
with \fBXML::Simple\fR (if installed on your system) rather than with
Yahoo::Search::XML, a simple \s-1XML\s0 parser included as part of this package.
XML::Simple uses XML::Parser under the hood, and at least on the systems
I've tested it, XML::Parser suffers from a crippling memory leak that makes
it very undesirable.
.Sp
However, if Yahoo! changes the \s-1XML\s0 they return in a way that my simple
parser can't handle, it tries parsing it with XML::Simple. If XML::Simple
is installed and can parse the \s-1XML\s0, \f(CW$Yahoo::Search::UseXmlSimple\fR is
automatically set to true and a warning generated suggesting that a bug
report be filed for Yahoo::Search::XML.
.Sp
If you encounter a situation where Yahoo::Search::XML can't grok Yahoo!'s
\&\s-1XML\s0, please submit a bug report. In the mean time, you can ensure that
XML::Simple is installed, set \f(CW$Yahoo::Search::UseXmlSimple\fR, and at least
have things work until you run out of memory.
.Sp
The default value of \f(CW$Yahoo::Search::UseXmlSimple\fR is taken from the
environment variable \f(CW\*(C`YAHOO_SEARCH_XMLSIMPLE\*(C'\fR if present, and otherwise
defaults to false.
.ie n .IP "$Yahoo::Search::Version" 5
.el .IP "\f(CW$Yahoo::Search::Version\fR" 5
.IX Item "$Yahoo::Search::Version"
A string in \*(L"X.Y.Z\*(R" format. The first number, the major version, increments
with large and/or backwards major incompatible changes. The second number
(minor version) updates with notable feature additions/changes. The third
number updates with every new release (and is the only one updated for
small bug\- and typo fix releases).
.SH "Environment"
.IX Header "Environment"
If \f(CW\*(C`YAHOO_SEARCH_XMLSIMPLE\*(C'\fR is set to a true (nonempty, non\-\*(L"0\*(R") value,
\&\f(CW$Yahoo::Search::UseXmlSimple\fR defaults to true. See above.
.PP
Yahoo::Search uses \s-1LWP\s0 to communicate with Yahoo!'s servers; \s-1LWP\s0 uses
environment variables such as \f(CW\*(C`http_proxy\*(C'\fR and \f(CW\*(C`no_proxy\*(C'\fR. See the
perldoc for \s-1LWP\s0 for more.
.SH "Author"
.IX Header "Author"
Jeffrey Friedl (jfriedl@yahoo.com)
.PP
Jeffrey placed the 1.10.13 code in the public domain (or, technically, the
http://creativecommons.org/publicdomain/zero/1.0/ licence) on June 11th 2010.
Tim Bunce (Tim.Bunce@pobox.com) currently maintains the code, though with very
little spare much time. He's very happy for someone else to help out.
.PP
Please use https://rt.cpan.org/Dist/Display.html?Queue=Yahoo\-Search to
submit bug reports.
