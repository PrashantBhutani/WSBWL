.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Yahoo::Search::Result 3pm"
.TH Yahoo::Search::Result 3pm "2010-06-15" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.SH "VERSION"
.IX Header "VERSION"
version 1.11.3
Yahoo::Search::Result \*(-- class representing a single result (single web
page, image, video file, etc) from a Yahoo! search-engine query.
(This package is included in, and automatically loaded by, the Yahoo::Search package.)
.SH "Package Use"
.IX Header "Package Use"
You never need to \f(CW\*(C`use\*(C'\fR this package directly \*(-- it is loaded
automatically by Yahoo::Search.
.SH "Object Creation"
.IX Header "Object Creation"
\&\f(CW\*(C`Result\*(C'\fR objects are created automatically when a \f(CW\*(C`Response\*(C'\fR object is
created (when a \f(CW\*(C`Request\*(C'\fR object's \f(CW\*(C`Fetch\*(C'\fR method is called, either
directly, or indirectly via a shortcut such as
\&\f(CW\*(C`Yahoo::Search\->Query()\*(C'\fR.
.SH "Methods Overview"
.IX Header "Methods Overview"
This table shows the methods available on a per-search-space basis:
.PP
.Vb 10
\&                                                     Terms
\&                                              Related  |
\&                                           Spell  |    |
\&                                      Local  |    |    |
\&                                  News  |    |    |    |
\&                            Video  |    |    |    |    |
\&                       Image  |    |    |    |    |    |
\&                   Doc   |    |    |    |    |    |    |
\&                    |    |    |    |    |    |    |    |
\&   Next            [X]  [X]  [X]  [X]  [X]  [X]  [X]  [X]
\&   Prev            [X]  [X]  [X]  [X]  [X]  [X]  [X]  [X]
\&   Response        [X]  [X]  [X]  [X]  [X]  [X]  [X]  [X]
\&   Request         [X]  [X]  [X]  [X]  [X]  [X]  [X]  [X]
\&   SearchSpace     [X]  [X]  [X]  [X]  [X]  [X]  [X]  [X]
\&
\& * I               [X]  [X]  [X]  [X]  [X]  [X]  [X]   .
\& * i               [X]  [X]  [X]  [X]  [X]  [X]  [X]   .
\&   as_html         [X]  [X]  [X]  [X]  [X]  [X]  [X]   .
\&   as_string       [X]  [X]  [X]  [X]  [X]  [X]  [X]   .
\&   Data            [X]  [X]  [X]  [X]  [X]  [X]  [X]   .
\&
\& * Url             [X]  [X]  [X]  [X]  [X]   .    .    .
\& * ClickUrl        [X]  [X]  [X]  [X]  [X]   .    .    .
\& * Title           [X]  [X]  [X]  [X]  [X]   .    .    .
\&   TitleAsHtml     [X]  [X]  [X]  [X]  [X]   .    .    .
\&   Link            [X]  [X]  [X]  [X]  [X]   .    .    .
\& * Summary         [X]  [X]  [X]  [X]   .    .    .    .
\&   SummaryAsHtml   [X]  [X]  [X]  [X]   .    .    .    .
\&
\& * CacheUrl        [X]   .    .    .    .    .    .    .
\& * CacheSize       [X]   .    .    .    .    .    .    .
\& * ModTimestamp    [X]   .    .   [X]   .    .    .    .
\&
\& * Width            .   [X]  [X]   .    .    .    .    .
\& * Height           .   [X]  [X]   .    .    .    .    .
\&
\& * ThumbUrl         .   [X]  [X]  [X]   .    .    .    .
\& * ThumbWidth       .   [X]  [X]  [X]   .    .    .    .
\& * ThumbHeight      .   [X]  [X]  [X]   .    .    .    .
\&   ThumbImg         .   [X]  [X]  [X]   .    .    .    .
\&   ThumbLink        .   [X]  [X]  [X]   .    .    .    .
\&
\& * HostUrl          .   [X]  [X]   .    .    .    .    .
\& * Copyright        .   [X]  [X]   .    .    .    .    .
\& * Publisher        .   [X]  [X]   .    .    .    .    .
\& * Restrictions     .   [X]  [X]   .    .    .    .    .
\&
\& * Type            [X]  [X]  [X]   .    .    .    .    .
\& * Bytes            .   [X]  [X]   .    .    .    .    .
\& * Channels         .    .   [X]   .    .    .    .    .
\& * Seconds          .    .   [X]   .    .    .    .    .
\& * Duration         .    .   [X]   .    .    .    .    .
\& * Streaming        .    .   [X]   .    .    .    .    .
\&
\& * SourceName       .    .    .   [X]   .    .    .    .
\&   SourceNameAsHtml .    .    .   [X]   .    .    .    .
\& * SourceUrl        .    .    .   [X]   .    .    .    .
\& * Language         .    .    .   [X]   .    .    .    .
\& * PublishTime      .    .    .   [X]   .    .    .    .
\& * PublishWhen      .    .    .   [X]   .    .    .    .
\&
\& * Address          .    .    .    .   [X]   .    .    .
\& * City             .    .    .    .   [X]   .    .    .
\& * State            .    .    .    .   [X]   .    .    .
\& * Phone            .    .    .    .   [X]   .    .    .
\& * Miles            .    .    .    .   [X]   .    .    .
\& * Kilometers       .    .    .    .   [X]   .    .    .
\& * Rating           .    .    .    .   [X]   .    .    .
\& * MapUrl           .    .    .    .   [X]   .    .    .
\& * BusinessUrl      .    .    .    .   [X]   .    .    .
\& * BusinessClickUrl .    .    .    .   [X]   .    .    .
\& * AllMapUrl        .    .    .    .   [X]   .    .    .
\&
\& * Term             .    .    .    .    .   [X]  [X]  [X]
\&   TermAsHtml       .    .    .    .    .   [X]  [X]  [X]
\&
\&                    |    |    |    |    |    |    |    |
\&                   Doc   |    |    |    |    |    |    |
\&                       Image  |    |    |    |    |    |
\&                            Video  |    |    |    |    |
\&                                  News  |    |    |    |
\&                                      Local  |    |    |
\&                                           Spell  |    |
\&                                              Related  |
\&                                                     Terms
.Ve
.PP
Those items marked with a '*' are also available via the \f(CW\*(C`Data\*(C'\fR method
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$Result\->Next([\fIboolean\fR])" 4
.el .IP "\f(CW$Result\fR\->Next([\fIboolean\fR])" 4
.IX Item "$Result->Next([boolean])"
Returns the next \f(CW\*(C`Result\*(C'\fR object from among the list of result objects
that are part of one \f(CW\*(C`Response\*(C'\fR object.
.Sp
Returns nothing when called on the last result in a response, unless
auto-continuation is turned on, in which case the next set is automatically
fetched and the first \f(CW\*(C`Result\*(C'\fR from that set's \f(CW\*(C`Response\*(C'\fR is returned.
.Sp
An optional defined boolean argument turns auto-continuation on (true) or
off (false). If the argument is not defined, or not provided, the value for
the original request's \f(CW\*(C`AutoContinue\*(C'\fR option (default off) is used.
.Sp
Note that using auto-continuation can be dangerous. See the docs for
\&\f(CW\*(C`NextResult\*(C'\fR in Yahoo::Search::Response.
.ie n .IP "$Result\->Prev" 4
.el .IP "\f(CW$Result\fR\->Prev" 4
.IX Item "$Result->Prev"
The opposite of \f(CW\*(C`Next\*(C'\fR. No auto-continuation feature.
.ie n .IP "$Result\->Response" 4
.el .IP "\f(CW$Result\fR\->Response" 4
.IX Item "$Result->Response"
Returns the \f(CW\*(C`Response\*(C'\fR object of which this \f(CW\*(C`Result\*(C'\fR object is a part.
.ie n .IP "$Result\->Request" 4
.el .IP "\f(CW$Result\fR\->Request" 4
.IX Item "$Result->Request"
Returns the original \f(CW\*(C`Request\*(C'\fR object from which this \f(CW\*(C`Result\*(C'\fR object's
\&\f(CW\*(C`Response\*(C'\fR was derived.
.ie n .IP "$Result\->SearchSpace" 4
.el .IP "\f(CW$Result\fR\->SearchSpace" 4
.IX Item "$Result->SearchSpace"
Returns a string which indicates the search space of the original query
that this result was part of. (That is, it returns \f(CW\*(C`Doc\*(C'\fR, \f(CW\*(C`Image\*(C'\fR,
\&\f(CW\*(C`News\*(C'\fR, \f(CW\*(C`Local\*(C'\fR, or \f(CW\*(C`Video\*(C'\fR.)
.Sp
It's the same as
.Sp
.Vb 1
\&   $Result\->Request\->SearchSpace;
.Ve
.ie n .IP "$Result\->i[ \fIseparator\fR ]" 4
.el .IP "\f(CW$Result\fR\->i[ \fIseparator\fR ]" 4
.IX Item "$Result->i[ separator ]"
.PD 0
.ie n .IP "$Result\->I[ \fIseparator\fR ]" 4
.el .IP "\f(CW$Result\fR\->I[ \fIseparator\fR ]" 4
.IX Item "$Result->I[ separator ]"
.PD
The first (lower-case letter \*(L"i\*(R") returns the zero-based ordinal of the
result from among those in the current \f(CW\*(C`Response\*(C'\fR.
.Sp
The latter (upper-case letter \*(L"I\*(R") returns the zero-based ordinal of the
result from among all search results that might be returned by Yahoo! for
the given query.
.Sp
For example, after
.Sp
.Vb 4
\&  my @Results = Yahoo::Search\->Results(Image => "Briteny",
\&                                       AppId => "my app id",
\&                                       Start => 45,
\&                                       Count => 15);
.Ve
.Sp
the \f(CW$Results[0]\fR result object has an \f(CW\*(C`I\*(C'\fR of 45 (the 45th result of all
\&\*(L"Briteny\*(R" image results) and an \f(CW\*(C`i\*(C'\fR of 0 (the 0th result among those
returned this time.)
.Sp
In either case, if an optional argument is given and is true, it is used as
a separator every three digits. In the \s-1US\s0, one would use
.Sp
.Vb 1
\&    $Result\->I(\*(Aq,\*(Aq)
.Ve
.Sp
to return \*(L"1,234\*(R" where
.Sp
.Vb 1
\&    $Result\->I()
.Ve
.Sp
would return \*(L"1234\*(R".
.ie n .IP "$Result\->as_html" 4
.el .IP "\f(CW$Result\fR\->as_html" 4
.IX Item "$Result->as_html"
Returns a string of \s-1HTML\s0 that represents the result, as appropriate to the
result's query search space.
.Sp
There are many ways one may wish to display query results \*(-- this method
returns one display that the author finds useful. It may come in useful for
quick prototyping of web applications, e.g.
.Sp
.Vb 4
\&  sub ShowRelated
\&  {
\&    print join "<hr>", map { $_\->as_html } Yahoo::Search\->Results(@_);
\&  }
.Ve
.Sp
(Also see \f(CW\*(C`Yahoo::Search\->HtmlResults\*(C'\fR)
.Sp
The \s-1HTML\s0 returned by \f(CW\*(C`as_html\*(C'\fR contains class references, thereby allowing
the look-and-feel to be easily adjusted. Here's a style sheet that makes
Image search results look palatable.
.Sp
.Vb 10
\&  <style>
\&    .yResult { display: block; border: #CCF 3px solid ; padding:10px }
\&    .yLink   { }
\&    .yTitle  { display:none }
\&    .yImg    { border: solid 1px }
\&    .yUrl    { display:none }
\&    .yMeta   { font\-size: 80% }
\&    .ySrcUrl { }
\&    .ySum    { font\-family: arial; font\-size: 90% }
\&  </style>
.Ve
.Sp
\&\fBBugs\fR: English-centric
.ie n .IP "$Result\->as_string" 4
.el .IP "\f(CW$Result\fR\->as_string" 4
.IX Item "$Result->as_string"
Returns a textual representation of the \f(CW\*(C`Result\*(C'\fR, which may be useful for
quick prototyping or debugging.
.ie n .IP "$Result\->Data" 4
.el .IP "\f(CW$Result\fR\->Data" 4
.IX Item "$Result->Data"
Returns a list of key/value pairs containing the fundamental data for the
result (those items marked with '*' in the table at the start of this
document).
.Sp
.Vb 1
\&  my %Data = $Result\->Data;
.Ve
.ie n .IP "$Result\->Url" 4
.el .IP "\f(CW$Result\fR\->Url" 4
.IX Item "$Result->Url"
.PD 0
.ie n .IP "$Result\->ClickUrl" 4
.el .IP "\f(CW$Result\fR\->ClickUrl" 4
.IX Item "$Result->ClickUrl"
.PD
\&\f(CW\*(C`Url\*(C'\fR returns the raw url of the item (web page, image, etc.), appropriate
for display to the user.
.Sp
\&\f(CW\*(C`ClickUrl\*(C'\fR returns a url appropriate for the href attribute of a link.
.Sp
In some cases, the two return the same url.
.Sp
As with all Result-object methods which return a url of some sort, you can
provide a single argument such as \f(CW\*(C`href\*(C'\fR and receive a string such as
   href=\*(L"...\*(R"
appropriate to be used directly in html. For example,
.Sp
.Vb 2
\&   my $HREF = $Result\->ClickUrl(\*(Aqhref\*(Aq);
\&   print "<a $HREF>click</a>";
.Ve
.Sp
is preferable to
.Sp
.Vb 2
\&   my $url = $Result\->ClickUrl;
\&   print "<a href=\*(Aq$url\*(Aq>click</a>";
.Ve
.Sp
since the latter would break if \f(CW$url\fR contains a singlequote.
.ie n .IP "$Result\->Title([ \fIas_html\fR ])" 4
.el .IP "\f(CW$Result\fR\->Title([ \fIas_html\fR ])" 4
.IX Item "$Result->Title([ as_html ])"
.PD 0
.ie n .IP "$Result\->TitleAsHtml" 4
.el .IP "\f(CW$Result\fR\->TitleAsHtml" 4
.IX Item "$Result->TitleAsHtml"
.PD
\&\f(CW\*(C`Title\*(C'\fR returns the raw title text associated with the result. If an
optional argument is provided and is true, the title text is returned as
html.
.Sp
\&\f(CW\*(C`TitleAsHtml\*(C'\fR is the same as
.Sp
.Vb 1
\&  $Result\->Title(1)
.Ve
.ie n .IP "$Result\->Link" 4
.el .IP "\f(CW$Result\fR\->Link" 4
.IX Item "$Result->Link"
Returns a link made from the \f(CW\*(C`ClickUrl\*(C'\fR and the \f(CW\*(C`Title\*(C'\fR, with class
\&\*(L"yLink\*(R", e.g.
.Sp
.Vb 1
\&   <a class=yLink href=\*(Aq$URL\*(Aq>$TITLE</a>
.Ve
.ie n .IP "$Result\->Summary([ \fIas_html\fR ])" 4
.el .IP "\f(CW$Result\fR\->Summary([ \fIas_html\fR ])" 4
.IX Item "$Result->Summary([ as_html ])"
.PD 0
.ie n .IP "$Result\->SummaryAsHtml" 4
.el .IP "\f(CW$Result\fR\->SummaryAsHtml" 4
.IX Item "$Result->SummaryAsHtml"
.PD
Like \f(CW\*(C`Title\*(C'\fR and \f(CW\*(C`TitleAsHtml\*(C'\fR, but for the summary associated with the
result.
.ie n .IP "$Result\->CacheUrl" 4
.el .IP "\f(CW$Result\fR\->CacheUrl" 4
.IX Item "$Result->CacheUrl"
.PD 0
.ie n .IP "$Result\->CacheSize" 4
.el .IP "\f(CW$Result\fR\->CacheSize" 4
.IX Item "$Result->CacheSize"
.PD
(\fIAppropriate for \f(BIDoc\fI search results\fR)
.Sp
\&\f(CW\*(C`CacheUrl\*(C'\fR returns the url of the document in the Yahoo! cache.
See the documentation for the \f(CW\*(C`Url\*(C'\fR method for information on the
one-argument version of this method.
.Sp
\&\f(CW\*(C`CacheSize\*(C'\fR returns the size (as a string like \*(L"22k\*(R").
.ie n .IP "$Result\->ModTimestamp" 4
.el .IP "\f(CW$Result\fR\->ModTimestamp" 4
.IX Item "$Result->ModTimestamp"
(\fIAppropriate for \f(BIDoc\fI and \f(BINews\fI search results\fR)
.Sp
The Unix timestamp of the Last-Modified time associated with the the url
when it was last checked by Yahoo!'s backend crawlers.
.ie n .IP "$Result\->Width" 4
.el .IP "\f(CW$Result\fR\->Width" 4
.IX Item "$Result->Width"
.PD 0
.ie n .IP "$Result\->Height" 4
.el .IP "\f(CW$Result\fR\->Height" 4
.IX Item "$Result->Height"
.PD
(\fIAppropriate for \f(BIImage\fI and \f(BIVideo\fI search results\fR)
.Sp
The width and height (in pixels) of the image or video.
.ie n .IP "$Result\->ThumbUrl" 4
.el .IP "\f(CW$Result\fR\->ThumbUrl" 4
.IX Item "$Result->ThumbUrl"
.PD 0
.ie n .IP "$Result\->ThumbWidth" 4
.el .IP "\f(CW$Result\fR\->ThumbWidth" 4
.IX Item "$Result->ThumbWidth"
.ie n .IP "$Result\->ThumbHeight" 4
.el .IP "\f(CW$Result\fR\->ThumbHeight" 4
.IX Item "$Result->ThumbHeight"
.PD
(\fIAppropriate for \f(BIImage\fI, \f(BIVideo\fI, and \f(BINews\fI search results\fR)
.Sp
The url of a thumbnail image, and its width and height.
.Sp
(Note: few \fINews\fR results have a thumbnail, but some do.)
.Sp
See the documentation for the \f(CW\*(C`Url\*(C'\fR method for information on the
one-argument version of \f(CW\*(C`ThumbUrl\*(C'\fR.
.ie n .IP "$Result\->ThumbImg" 4
.el .IP "\f(CW$Result\fR\->ThumbImg" 4
.IX Item "$Result->ThumbImg"
(\fIAppropriate for \f(BIImage\fI, \f(BIVideo\fI, and \f(BINews\fI search results\fR)
.Sp
Returns a \f(CW\*(C`<img>\*(C'\fR tag representing the thumbnail image, e.g.
.Sp
.Vb 1
\&  <img class=yImg src=\*(Aq$IMGURL\*(Aq width=$WIDTH height=$HEIGHT>
.Ve
.ie n .IP "$Result\->ThumbLink" 4
.el .IP "\f(CW$Result\fR\->ThumbLink" 4
.IX Item "$Result->ThumbLink"
(\fIAppropriate for \f(BIImage\fI, \f(BIVideo\fI, and \f(BINews\fI search results\fR)
.Sp
Returns a link from the thumbnail to the \f(CW\*(C`ClickUrl\*(C'\fR of the result,
e.g.
.Sp
.Vb 3
\&  <a class=yLink href=\*(Aq$CLICKURL\*(Aq>
\&    <img class=yImg src=\*(Aq$IMGURL\*(Aq width=$WIDTH height=$HEIGHT>
\&  </a>
.Ve
.ie n .IP "$Result\->HostUrl" 4
.el .IP "\f(CW$Result\fR\->HostUrl" 4
.IX Item "$Result->HostUrl"
(\fIAppropriate for \f(BIImage\fI and \f(BIVideo\fI search results\fR)
.Sp
Returns the url of the web page containing a link to the image/video
item that the \f(CW\*(C`Result\*(C'\fR represents.
.Sp
See the documentation for the \f(CW\*(C`Url\*(C'\fR method for information on the
one-argument version of this method.
.ie n .IP "$Result\->Type" 4
.el .IP "\f(CW$Result\fR\->Type" 4
.IX Item "$Result->Type"
(<Appropriate for \fBDoc\fR, \fBImage\fR, and \fBVideo\fR search results>)
.Sp
Returns a string representing the file type of the item to which
\&\f(CW\*(C`$Result\->Url\*(C'\fR points. For \fIDoc\fR searches, the \s-1MIME\s0 type (e.g.
\&\*(L"text/html\*(R") is returned.
.Sp
For other search spaces, here are the possible return values:
.Sp
.Vb 2
\&  Video:  avi  flash  mpeg  msmedia  quicktime  realmedia
\&  Image:  bmp  gif  jpg  png.
.Ve
.Sp
Yahoo! Search derives these Video/Image \f(CW\*(C`Type\*(C'\fR value by actually
inspecting the file contents, and as such it is more reliable than looking
at the file extension.
.ie n .IP "$Result\->Copyright([ \fIas_html\fR ])" 4
.el .IP "\f(CW$Result\fR\->Copyright([ \fIas_html\fR ])" 4
.IX Item "$Result->Copyright([ as_html ])"
(<Appropriate for \fBImage\fR and \fBVideo\fR search results>)
.Sp
Returns any copyright notice associated with the result. If an optional
argument is provided and is true, the copyright text is returned as html.
.ie n .IP "$Result\->Publisher([ \fIas_html\fR ])" 4
.el .IP "\f(CW$Result\fR\->Publisher([ \fIas_html\fR ])" 4
.IX Item "$Result->Publisher([ as_html ])"
(<Appropriate for \fBImage\fR, and \fBVideo\fR search results>)
.Sp
Returns any publisher information (as a string) associated with the result.
If an optional argument is provided and is true, the publisher information
is returned as html.
.ie n .IP "$Result\->Restrictions" 4
.el .IP "\f(CW$Result\fR\->Restrictions" 4
.IX Item "$Result->Restrictions"
(<Appropriate for \fBImage\fR, and \fBVideo\fR search results>)
.Sp
A (possibly zero-length) string containing zero or more of the following
space-separated words:
.Sp
.Vb 2
\&  noframe
\&  noinline
.Ve
.Sp
See Yahoo!'s web site (http://developer.yahoo.net/) for information on them.
.ie n .IP "$Result\->Bytes" 4
.el .IP "\f(CW$Result\fR\->Bytes" 4
.IX Item "$Result->Bytes"
(\fIAppropriate for \f(BIImage\fI, and \f(BIVideo\fI search results\fR)
.Sp
The size of the image/video item, in bytes.
.ie n .IP "$Result\->Channels" 4
.el .IP "\f(CW$Result\fR\->Channels" 4
.IX Item "$Result->Channels"
(\fIAppropriate for \f(BIVideo\fI search results\fR)
.Sp
Returns the number of channels in the audio, if known.
Examples are \*(L"1\*(R", \*(L"2\*(R", \*(L"4.1\*(R", \*(L"5.1\*(R", etc....
.ie n .IP "$Result\->Seconds" 4
.el .IP "\f(CW$Result\fR\->Seconds" 4
.IX Item "$Result->Seconds"
(\fIAppropriate for \f(BIVideo\fI search results\fR)
.Sp
Returns the duration of the video clip, if known, in (possibly fractional)
seconds.
.ie n .IP "$Result\->Duration" 4
.el .IP "\f(CW$Result\fR\->Duration" 4
.IX Item "$Result->Duration"
(\fIAppropriate for \f(BIVideo\fI search results\fR)
.Sp
Returns a string representing the duration of the video clip, if known, in
the form of \*(L"37 sec\*(R", \*(L"1:23\*(R", or \*(L"4:56:23\*(R", as appropriate.
.Sp
\&\fBBugs\fR: English-centric
.ie n .IP "$Result\->Streaming" 4
.el .IP "\f(CW$Result\fR\->Streaming" 4
.IX Item "$Result->Streaming"
(\fIAppropriate for \f(BIVideo\fI search results\fR)
.Sp
Returns \*(L"1\*(R" if the multimedia is streaming, \*(L"0\*(R" if not.
If not known, an empty list is returned.
.ie n .IP "$Result\->SourceUrl" 4
.el .IP "\f(CW$Result\fR\->SourceUrl" 4
.IX Item "$Result->SourceUrl"
(\fIAppropriate for \f(BINews\fI search results\fR)
.Sp
The main url of the news provider hosting the article that the \f(CW\*(C`Result\*(C'\fR
refers to.
.Sp
See the documentation for the \f(CW\*(C`Url\*(C'\fR method for information on the
one-argument version of this method.
.ie n .IP "$Result\->SourceName([ \fIas_html\fR ])" 4
.el .IP "\f(CW$Result\fR\->SourceName([ \fIas_html\fR ])" 4
.IX Item "$Result->SourceName([ as_html ])"
.PD 0
.ie n .IP "$Result\->SourceNameAsHtml" 4
.el .IP "\f(CW$Result\fR\->SourceNameAsHtml" 4
.IX Item "$Result->SourceNameAsHtml"
.PD
(\fIAppropriate for \f(BINews\fI search results\fR)
.Sp
Similar to \f(CW\*(C`Title\*(C'\fR and \f(CW\*(C`TitleAsHtml\*(C'\fR, but the name of the organization
associated with the news article (and, by extension, with \f(CW\*(C`SourceUrl\*(C'\fR).
.ie n .IP "$Result\->Language" 4
.el .IP "\f(CW$Result\fR\->Language" 4
.IX Item "$Result->Language"
(\fIAppropriate for \f(BINews\fI search results\fR)
.Sp
A code representing the language in which the article is written (e.g. \*(L"en\*(R"
for English, \*(L"ja\*(R" for Japanese, etc.). See the list of language codes at
\&\f(CW\*(C`perldoc\*(C'\fR Yahoo::Search.
.ie n .IP "$Result\->PublishTime" 4
.el .IP "\f(CW$Result\fR\->PublishTime" 4
.IX Item "$Result->PublishTime"
.PD 0
.ie n .IP "$Result\->PublishWhen" 4
.el .IP "\f(CW$Result\fR\->PublishWhen" 4
.IX Item "$Result->PublishWhen"
.PD
(\fIAppropriate for \f(BINews\fI search results\fR)
.Sp
\&\f(CW\*(C`PublishTime\*(C'\fR is the Unix time associated with the article, e.g.
.Sp
.Vb 1
\&  print "Published ", scalar(localtime $Result\->PublishTime), "\en";
.Ve
.Sp
\&\f(CW\*(C`PublishWhen\*(C'\fR gives a string along the lines of
.Sp
.Vb 4
\&  3h 25m ago              (if less than 12 hours ago)
\&  Tue 9:47am              (if less than 5 days ago)
\&  Sat, Dec 25             (if less than 100 days ago)
\&  Sat, Dec 25, 2004       (if >= 100 days ago)
.Ve
.Sp
\&\fBBug\fR: \f(CW\*(C`PublishWhen\*(C'\fR is English-centric.
.ie n .IP "$Result\->Address" 4
.el .IP "\f(CW$Result\fR\->Address" 4
.IX Item "$Result->Address"
.PD 0
.ie n .IP "$Result\->City" 4
.el .IP "\f(CW$Result\fR\->City" 4
.IX Item "$Result->City"
.ie n .IP "$Result\->State" 4
.el .IP "\f(CW$Result\fR\->State" 4
.IX Item "$Result->State"
.ie n .IP "$Result\->Phone" 4
.el .IP "\f(CW$Result\fR\->Phone" 4
.IX Item "$Result->Phone"
.PD
(\fIAppropriate for \f(BILocal\fI search results\fR)
.Sp
Location and Phone number for the business that the \f(CW\*(C`Result\*(C'\fR refers to.
.ie n .IP "$Result\->Miles" 4
.el .IP "\f(CW$Result\fR\->Miles" 4
.IX Item "$Result->Miles"
.PD 0
.ie n .IP "$Result\->Kilometers" 4
.el .IP "\f(CW$Result\fR\->Kilometers" 4
.IX Item "$Result->Kilometers"
.PD
(\fIAppropriate for \f(BILocal\fI search results\fR)
.Sp
The distance (in miles and kilometers) from the location used to make the
query to the location of this result.
.ie n .IP "$Result\->Rating" 4
.el .IP "\f(CW$Result\fR\->Rating" 4
.IX Item "$Result->Rating"
(\fIAppropriate for \f(BILocal\fI search results\fR)
.Sp
Returns the rating associated with the result, if there is one. If there is
a rating, it is from 1 (lowest) to 5 (highest) in 0.5\-sized steps. If not,
nothing is returned.
.ie n .IP "$Result\->MapUrl" 4
.el .IP "\f(CW$Result\fR\->MapUrl" 4
.IX Item "$Result->MapUrl"
.PD 0
.ie n .IP "$Result\->AllMapUrl" 4
.el .IP "\f(CW$Result\fR\->AllMapUrl" 4
.IX Item "$Result->AllMapUrl"
.PD
(\fIAppropriate for \f(BILocal\fI search results\fR)
.Sp
\&\f(CW\*(C`MapUrl\*(C'\fR is a url to a Yahoo! Maps map showing the business' location.
.Sp
\&\f(CW\*(C`AllMapUrl\*(C'\fR is a url to a Yahoo! Maps map showing all the businesses
found in the same result-set that the current \f(CW\*(C`Result\*(C'\fR was part of.
.Sp
See the documentation for the \f(CW\*(C`Url\*(C'\fR method for information on the
one-argument versions of these methods.
.ie n .IP "$Result\->BusinessUrl" 4
.el .IP "\f(CW$Result\fR\->BusinessUrl" 4
.IX Item "$Result->BusinessUrl"
.PD 0
.ie n .IP "$Result\->BusinessClickUrl" 4
.el .IP "\f(CW$Result\fR\->BusinessClickUrl" 4
.IX Item "$Result->BusinessClickUrl"
.PD
(\fIAppropriate for \f(BILocal\fI search results\fR)
.Sp
The business' home page, if available. \f(CW\*(C`BusinessUrl\*(C'\fR is appropriate for
display, while \f(CW\*(C`BusinessClickUrl\*(C'\fR is appropriate for the href of a link.
.Sp
See the documentation for the \f(CW\*(C`Url\*(C'\fR method for information on the
one-argument versions of these methods.
.ie n .IP "$Result\->Term([ \fIas_html\fR ])" 4
.el .IP "\f(CW$Result\fR\->Term([ \fIas_html\fR ])" 4
.IX Item "$Result->Term([ as_html ])"
.PD 0
.ie n .IP "$Result\->TermAsHtml" 4
.el .IP "\f(CW$Result\fR\->TermAsHtml" 4
.IX Item "$Result->TermAsHtml"
.PD
(\fIAppropriate for \f(BISpell\fI, \f(BIRelated\fI, and \f(BITerms\fI search results\fR)
.Sp
\&\f(CW\*(C`Term\*(C'\fR returns the term associated with the result. If an optional
argument is provided and is true, the term text is returned as html.
.Sp
\&\f(CW\*(C`TermAsHtml\*(C'\fR is the same as
.Sp
.Vb 1
\&  $Result\->Term(1)
.Ve
.SH "Author"
.IX Header "Author"
Jeffrey Friedl (jfriedl@yahoo.com)
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 986:" 4
.IX Item "Around line 986:"
=cut found outside a pod block.  Skipping to next block.
